
networks:
  resume_network:

services:
    server:
        container_name: resume_django
        restart: always
        build:
            context: .
            dockerfile: ./Dockerfile
        entrypoint: /app/docker/server-entrypoint.sh
        volumes:
            - static_volume:/app/staticfiles

        ports:
          - "8000:8000"
        environment:
            DEBUG: "True"
            DJANGO_REDIS_CACHE_URL: "redis://redis:6379/1"
            CELERY_BROKER_URL: "redis://redis:6379/0"
            CELERY_RESULT_BACKEND: "redis://redis:6379/0"
            POSTGRES_DB: ${NAME_DB}
            POSTGRES_USER: ${USER_DB}
            POSTGRES_PASSWORD: ${PASSWORD_DB}
            POSTGRES_HOST: db
            POSTGRES_PORT: 5432

        depends_on:
          db:
            condition: service_healthy
          redis:
            condition: service_healthy
#        healthcheck:
#            test:  ["CMD", "pgrep", "-f", "python3 manage.py runserver 0.0.0.0:8000"]
#            interval: 30s
#            timeout: 10s
#            retries: 3

        networks:
          - resume_network

    db:
        container_name: resume_postgres
        image: postgres:13.0-alpine
        restart: always
        env_file:
          - .env
        volumes:
            - postgres_data:/var/lib/postgresql/data/
        environment:
          POSTGRES_DB: ${NAME_DB}
          POSTGRES_USER: ${USER_DB}
          POSTGRES_PASSWORD: ${PASSWORD_DB}
        expose:
          - 5432
        healthcheck:
          test: ["CMD-SHELL", "psql -h localhost -U ${USER_DB} -d ${NAME_DB} -c 'SELECT 1;'"]
          interval: 30s
          timeout: 10s
          retries: 3
        networks:
          - resume_network

    redis:
        container_name: resume_redis
        restart: unless-stopped
        image: redis:7.0.5-alpine
        expose:
          - 6379

        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "6379"]
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
          - resume_network


    worker:
      build:
        context: .
      command: celery -A core worker --loglevel=info
      environment:
        DEBUG: "True"
        CELERY_BROKER_URL: "redis://redis:6379/0"
        CELERY_RESULT_BACKEND: "redis://redis:6379/0"
        POSTGRES_DB: ${NAME_DB}
        POSTGRES_USER: ${USER_DB}
        POSTGRES_PASSWORD: ${PASSWORD_DB}
        POSTGRES_HOST: db
        POSTGRES_PORT: 5432
      depends_on:

        redis:
          condition: service_healthy
        db:
          condition: service_healthy
        server:
          condition: service_started

      networks:
        - resume_network

volumes:
    static_volume: {}
    postgres_data: {}




#services:
#
#  server:
#    build: .
#
#    container_name: resume_django
#
#    command: ["sh", "-c",
#                "python3 manage.py makemigrations &&
#                 python3 manage.py migrate &&
#                 python3 manage.py runserver 0.0.0.0:8000"
#             ]
#    volumes:
#         - .:/app
#
#    ports:
#      - "8000:8000"
#
#    depends_on:
#       db:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
#
#    restart: always
#
##    healthcheck:
##       test:  ["CMD", "pgrep", "-f", "python3 manage.py runserver 0.0.0.0:8000"]
##       interval: 30s
##       timeout: 10s
##       retries: 3
#
#
#  db:
#    image: postgres:latest
#
#    container_name: resume_postgres
#
#    env_file:
#      - .env
#
#    environment:
#      POSTGRES_DB: ${NAME_DB}
#      POSTGRES_USER: ${USER_DB}
#      POSTGRES_PASSWORD: ${PASSWORD_DB}
#    restart: always
#
#    healthcheck:
#          test: ["CMD-SHELL", "psql -h localhost -U ${USER_DB} -d ${NAME_DB} -c 'SELECT 1;'"]
#          interval: 30s
#          timeout: 10s
#          retries: 3
#
#
#  redis:
#    image: redis
#
#    container_name: resume_redis
#
#    restart: always
#
#    healthcheck:
#      test: [ "CMD", "redis-cli", "ping" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#

#  celery:
#    build: .
#
#    container_name: book_celery
#
#    command: celery -A test_book_app worker --loglevel=info
#
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#      web:
#        condition: service_healthy
#
#    restart: always
#
#    healthcheck:
#      test: [ "CMD", "celery", "-A", "test_book_app", "inspect", "active" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3
